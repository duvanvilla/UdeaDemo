### Puerto personalizado
server.port = 8080

### Variable para uso de Swagger
spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

#### Conexión a BD
# La siguiente línea de código contiene la cadena de conexión para conectarnos a nuestra base de datos
    # Explicación de anatomía de la url:
    # spring.datasource.url > parametro para guardar la url de la base de datos
    # jdbc:postgresql: > Este es el protocolo
    # //db.vzouykhvtdrjwjaahsvl.supabase.co > Este es el host
    # :5432 > Este es el puerto
    # /postgres > Este es el nombre de la base de datos
spring.datasource.url = jdbc:postgresql://db.vzouykhvtdrjwjaahsvl.supabase.co:5432/postgres

# La siguiente línea contiene el nombre de usuario configurado en la base de datos
spring.datasource.username = postgres

# La siguiente línea contiene la contraseña configurada en la base de datos
spring.datasource.password = rootpass1*2*3

# La siguiente línea contiene la configuración del dialecto que se va a usar para hacer el ORM (Mapeo Relacional de Objetos)
# Cada motor de base de datos tiene su propio dialecto (MySQL, PostgreSQL, etc), buscar en internet: dialecto 'motor de base de datos'
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# La siguiente línea contiene el cómo vamos a hacer el DDL
# Sentencia DDL = Lenguaje de Definición de Datos
# Sentencia DML = Lenguaje de Manipulación de Datos
# Opciones de la sentencia DDL:
    # create: intenta crear lo que está mapeado en los objetos, pero si la tabla ya existe no la crea y genera un error
    # create-drop: sobre escribe la tabla, se pierde los datos que ya tenga la tabla
    # validate: chequea entre la lógica y la BD las diferencias que tienen
    # update: encuentra diferencias, y si las hay las sincroniza
spring.jpa.hibernate.ddl-auto = update